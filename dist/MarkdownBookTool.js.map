{"version":3,"sources":["../src/MarkdownBookTool.js"],"names":["MarkdownBookTool","autobind","constructor","container","toolName","log","debug","run","argv","options","boolean","string","alias","o","args","version","info","fullVersion","help","bookPath","_","Error","outputPath","path","join","dirname","basename","extname","files","title","number","JSON5","parse","fs","readFile","Array","isArray","tmpPath","tempy","file","extension","bookDir","resolve","writeFile","numbering","createSectionNumber","depth","section","length","push","pop","i","filePath","isAbsolute","markdown","encoding","replace","match","p1","appendFile","move","overwrite"],"mappings":"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","sourcesContent":["import parseArgs from \"minimist\"\nimport autobind from \"autobind-decorator\"\nimport * as version from \"./version\"\nimport JSON5 from \"@johnls/json5\"\nimport tempy from \"tempy\"\nimport fs from \"fs-extra\"\nimport path from \"path\"\n\n@autobind\nexport class MarkdownBookTool {\n  constructor(container) {\n    this.toolName = container.toolName\n    this.log = container.log\n    this.debug = !!container.debug\n  }\n\n  async run(argv) {\n    const options = {\n      boolean: [\"help\", \"version\"],\n      string: [\"output\"],\n      alias: {\n        o: \"output\",\n      },\n    }\n\n    const args = parseArgs(argv, options)\n\n    if (args.version) {\n      this.log.info(version.fullVersion)\n      return 0\n    }\n\n    if (args.help) {\n      this.log.info(`\nUsage: ${this.toolName} [options] <book-definition-file>\n\nDescription:\n\nCreates a book from Markdown files.  Supply a JSON5 file list all the\nMarkdown files in the book in order.\n\nOptions:\n  --help                        Shows this help.\n  --version                     Shows the tool version.\n  --output <file>, -o <file>    Markdown output file. Default is definition\n                                file name with .md extension.\n`)\n      return 0\n    }\n\n    const bookPath = args._[0]\n\n    if (!bookPath) {\n      throw new Error(\"A book definition file must be specified\")\n    }\n\n    let outputPath = args[\"output\"]\n\n    if (!outputPath) {\n      outputPath =\n        path.join(\n          path.dirname(bookPath),\n          path.basename(bookPath, path.extname(bookPath))\n        ) + \".md\"\n    }\n\n    const { files, title = \"Unknown\", number } = JSON5.parse(\n      await fs.readFile(bookPath)\n    )\n\n    if (!files || !Array.isArray(files)) {\n      throw new Error(\"No files array property specified\")\n    }\n\n    const tmpPath = tempy.file({ extension: \"md\" })\n    const bookDir = path.resolve(path.dirname(bookPath))\n\n    fs.writeFile(tmpPath, `# ${title}\\n\\n`)\n    this.log.info(`Book title is '${title}'`)\n\n    let numbering = [0]\n    const createSectionNumber = (depth, numbering) => {\n      let section = \"\"\n\n      while (true) {\n        if (depth > numbering.length) {\n          numbering.push(0)\n        } else if (depth === numbering.length) {\n          numbering[numbering.length - 1] += 1\n          break\n        } else if (depth < numbering.length) {\n          numbering.pop()\n        }\n      }\n\n      for (let i = 0; i < numbering.length; i++) {\n        section += numbering[i] + \".\"\n      }\n\n      return section\n    }\n\n    for (let filePath of files) {\n      if (!path.isAbsolute(filePath)) {\n        filePath = path.resolve(bookDir, filePath)\n      }\n\n      this.log.info(`Appending ${path.basename(filePath)}`)\n\n      let markdown = await fs.readFile(filePath, { encoding: \"utf8\" })\n\n      // Re-write the headings\n      markdown = markdown.replace(/^(#+) /gm, (match, p1) => {\n        return (\n          \"#\" +\n          p1 +\n          \" \" +\n          (number ? createSectionNumber(p1.length, numbering) : \"\") +\n          \" \"\n        )\n      })\n\n      // Ensure file ends with a blank line\n      markdown += \"\\n\"\n\n      fs.appendFile(tmpPath, markdown)\n    }\n\n    fs.move(tmpPath, outputPath, { overwrite: true })\n    this.log.info(`Output file is ${outputPath}`)\n\n    return 0\n  }\n}\n"],"file":"MarkdownBookTool.js"}