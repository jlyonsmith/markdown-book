{"version":3,"sources":["../src/MarkdownBookTool.js"],"names":["pipeToPromise","readable","writeable","promise","Promise","resolve","reject","on","error","file","pipe","MarkdownBookTool","autobind","constructor","container","toolName","log","debug","run","argv","options","boolean","string","alias","o","args","version","info","fullVersion","help","bookPath","_","Error","outputPath","path","join","dirname","basename","extname","files","title","number","toc","JSON5","parse","fs","readFile","Array","isArray","sectionsTmpPath","tempy","extension","bookTmpPath","bookDir","writeFile","tableOfContents","numbering","createSectionNumber","depth","section","length","push","pop","i","filePath","isAbsolute","fileDir","markdown","encoding","replace","match","p1","p2","link","toLowerCase","repeat","relative","appendFile","createReadStream","createWriteStream","flags","move","overwrite"],"mappings":"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","sourcesContent":["import parseArgs from \"minimist\"\nimport autobind from \"autobind-decorator\"\nimport * as version from \"./version\"\nimport JSON5 from \"@johnls/json5\"\nimport tempy from \"tempy\"\nimport fs from \"fs-extra\"\nimport path from \"path\"\n\nconst pipeToPromise = (readable, writeable) => {\n  const promise = new Promise((resolve, reject) => {\n    readable.on(\"error\", (error) => {\n      reject(error)\n    })\n    writeable.on(\"error\", (error) => {\n      reject(error)\n    })\n    writeable.on(\"finish\", (file) => {\n      resolve(file)\n    })\n  })\n  readable.pipe(writeable)\n  return promise\n}\n\n@autobind\nexport class MarkdownBookTool {\n  constructor(container) {\n    this.toolName = container.toolName\n    this.log = container.log\n    this.debug = !!container.debug\n  }\n\n  async run(argv) {\n    const options = {\n      boolean: [\"debug\", \"help\", \"version\"],\n      string: [\"output\"],\n      alias: {\n        o: \"output\",\n      },\n    }\n\n    const args = parseArgs(argv, options)\n\n    this.debug = !!args.debug\n\n    if (args.version) {\n      this.log.info(version.fullVersion)\n      return 0\n    }\n\n    if (args.help) {\n      this.log.info(`\nUsage: ${this.toolName} [options] <book-definition-file>\n\nDescription:\n\nCreates a book from Markdown files.  Supply a JSON5 file list all the\nMarkdown files in the book in order.\n\nOptions:\n  --help                        Shows this help.\n  --version                     Shows the tool version.\n  --output <file>, -o <file>    Markdown output file. Default is definition\n                                file name with .md extension.\n`)\n      return 0\n    }\n\n    const bookPath = args._[0]\n\n    if (!bookPath) {\n      throw new Error(\"A book definition file must be specified\")\n    }\n\n    let outputPath = args[\"output\"]\n\n    if (!outputPath) {\n      outputPath =\n        path.join(\n          path.dirname(bookPath),\n          path.basename(bookPath, path.extname(bookPath))\n        ) + \".md\"\n    }\n\n    const { files, title = \"Unknown\", number, toc } = JSON5.parse(\n      await fs.readFile(bookPath)\n    )\n\n    if (!files || !Array.isArray(files)) {\n      throw new Error(\"No files array property specified\")\n    }\n\n    const sectionsTmpPath = tempy.file({ extension: \"md\" })\n    const bookTmpPath = tempy.file({ extension: \"md\" })\n    const bookDir = path.resolve(path.dirname(bookPath))\n\n    this.log.info(`Book title is '${title}'`)\n\n    await fs.writeFile(bookTmpPath, `# ${title}\\n\\n`)\n\n    let tableOfContents = \"\"\n    let numbering = [0]\n    const createSectionNumber = (depth, numbering) => {\n      let section = \"\"\n\n      while (true) {\n        if (depth > numbering.length) {\n          numbering.push(0)\n        } else if (depth === numbering.length) {\n          numbering[numbering.length - 1] += 1\n          break\n        } else if (depth < numbering.length) {\n          numbering.pop()\n        }\n      }\n\n      for (let i = 0; i < numbering.length; i++) {\n        section += numbering[i] + \".\"\n      }\n\n      return section\n    }\n\n    for (let filePath of files) {\n      if (!path.isAbsolute(filePath)) {\n        filePath = path.resolve(bookDir, filePath)\n      }\n\n      const fileDir = path.dirname(filePath)\n\n      this.log.info(`Appending ${path.basename(filePath)}`)\n\n      let markdown = await fs.readFile(filePath, { encoding: \"utf8\" })\n\n      // Re-write the headings\n      markdown = markdown.replace(/^(#+) (.*)$/gm, (match, p1, p2) => {\n        const section = createSectionNumber(p1.length, numbering)\n\n        if (toc) {\n          const title = (number ? section + \" \" : \"\") + p2\n          const link = title\n            .toLowerCase()\n            .replace(/\\./g, \"\")\n            .replace(/ /g, \"-\")\n\n          tableOfContents +=\n            \"&nbsp;\".repeat((numbering.length - 1) * 2) +\n            \"[\" +\n            title +\n            \"](#\" +\n            link +\n            \")  \\n\"\n        }\n\n        return \"#\" + p1 + \" \" + (number ? section : \"\") + \" \" + p2\n      })\n\n      // Re-write relative image links\n      markdown = markdown.replace(/!\\[(.+)\\]\\((.+)\\)/gm, (match, p1, p2) => {\n        return (\n          \"![\" +\n          p1 +\n          \"](\" +\n          path.relative(bookDir, path.resolve(fileDir, p2)) +\n          \")\"\n        )\n      })\n\n      // Ensure file ends with a blank line\n      markdown += \"\\n\"\n\n      await fs.appendFile(sectionsTmpPath, markdown)\n    }\n\n    tableOfContents += \"\\n---\\n\\n\"\n\n    if (toc) {\n      await fs.appendFile(bookTmpPath, tableOfContents)\n    }\n\n    await pipeToPromise(\n      fs.createReadStream(sectionsTmpPath),\n      fs.createWriteStream(bookTmpPath, { flags: \"a\" })\n    )\n    await fs.move(bookTmpPath, outputPath, { overwrite: true })\n\n    this.log.info(`Output file is ${outputPath}`)\n\n    return 0\n  }\n}\n"],"file":"MarkdownBookTool.js"}