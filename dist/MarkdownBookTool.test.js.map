{"version":3,"sources":["../src/MarkdownBookTool.test.js"],"names":["container","beforeEach","toolName","log","info","jest","fn","warning","error","getOutput","calls","mock","length","test","tool","MarkdownBookTool","exitCode","run","expect","toBe","toEqual","stringContaining","stringMatching","rejects","toThrow","Error"],"mappings":";;AAAA;;AAEA,IAAIA,SAAS,GAAG,IAAhB;AAEAC,UAAU,CAAC,MAAM;AACfD,EAAAA,SAAS,GAAG;AACVE,IAAAA,QAAQ,EAAE,eADA;AAEVC,IAAAA,GAAG,EAAE;AACHC,MAAAA,IAAI,EAAEC,IAAI,CAACC,EAAL,EADH;AAEHC,MAAAA,OAAO,EAAEF,IAAI,CAACC,EAAL,EAFN;AAGHE,MAAAA,KAAK,EAAEH,IAAI,CAACC,EAAL;AAHJ;AAFK,GAAZ;AAQD,CATS,CAAV;;AAWA,MAAMG,SAAS,GAAIH,EAAD,IAAQ;AACxB,QAAMI,KAAK,GAAGJ,EAAE,CAACK,IAAH,CAAQD,KAAtB;AAEA,SAAOA,KAAK,CAACE,MAAN,GAAe,CAAf,IAAoBF,KAAK,CAAC,CAAD,CAAL,CAASE,MAAT,GAAkB,CAAtC,GAA0CF,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,CAA1C,GAAwD,EAA/D;AACD,CAJD;;AAMAG,IAAI,CAAC,QAAD,EAAW,YAAY;AACzB,QAAMC,IAAI,GAAG,IAAIC,kCAAJ,CAAqBf,SAArB,CAAb;AACA,QAAMgB,QAAQ,GAAG,MAAMF,IAAI,CAACG,GAAL,CAAS,CAAC,QAAD,CAAT,CAAvB;AAEAC,EAAAA,MAAM,CAACF,QAAD,CAAN,CAAiBG,IAAjB,CAAsB,CAAtB;AACAD,EAAAA,MAAM,CAACT,SAAS,CAACT,SAAS,CAACG,GAAV,CAAcC,IAAf,CAAV,CAAN,CAAsCgB,OAAtC,CACEF,MAAM,CAACG,gBAAP,CAAwB,QAAxB,CADF;AAGD,CARG,CAAJ;AAUAR,IAAI,CAAC,WAAD,EAAc,YAAY;AAC5B,QAAMC,IAAI,GAAG,IAAIC,kCAAJ,CAAqBf,SAArB,CAAb;AACA,QAAMgB,QAAQ,GAAG,MAAMF,IAAI,CAACG,GAAL,CAAS,CAAC,WAAD,CAAT,CAAvB;AAEAC,EAAAA,MAAM,CAACF,QAAD,CAAN,CAAiBG,IAAjB,CAAsB,CAAtB;AACAD,EAAAA,MAAM,CAACT,SAAS,CAACT,SAAS,CAACG,GAAV,CAAcC,IAAf,CAAV,CAAN,CAAsCgB,OAAtC,CACEF,MAAM,CAACI,cAAP,CAAsB,YAAtB,CADF;AAGD,CARG,CAAJ;AAUAT,IAAI,CAAC,SAAD,EAAY,YAAY;AAC1B,QAAMC,IAAI,GAAG,IAAIC,kCAAJ,CAAqBf,SAArB,CAAb;AAEA,QAAMkB,MAAM,CAACJ,IAAI,CAACG,GAAL,CAAS,EAAT,CAAD,CAAN,CAAqBM,OAArB,CAA6BC,OAA7B,CAAqCC,KAArC,CAAN;AACD,CAJG,CAAJ","sourcesContent":["import { MarkdownBookTool } from \"./MarkdownBookTool\"\n\nlet container = null\n\nbeforeEach(() => {\n  container = {\n    toolName: \"markdown-book\",\n    log: {\n      info: jest.fn(),\n      warning: jest.fn(),\n      error: jest.fn(),\n    },\n  }\n})\n\nconst getOutput = (fn) => {\n  const calls = fn.mock.calls\n\n  return calls.length > 0 && calls[0].length > 0 ? calls[0][0] : \"\"\n}\n\ntest(\"--help\", async () => {\n  const tool = new MarkdownBookTool(container)\n  const exitCode = await tool.run([\"--help\"])\n\n  expect(exitCode).toBe(0)\n  expect(getOutput(container.log.info)).toEqual(\n    expect.stringContaining(\"--help\")\n  )\n})\n\ntest(\"--version\", async () => {\n  const tool = new MarkdownBookTool(container)\n  const exitCode = await tool.run([\"--version\"])\n\n  expect(exitCode).toBe(0)\n  expect(getOutput(container.log.info)).toEqual(\n    expect.stringMatching(/\\d\\.\\d\\.\\d/)\n  )\n})\n\ntest(\"no args\", async () => {\n  const tool = new MarkdownBookTool(container)\n\n  await expect(tool.run([])).rejects.toThrow(Error)\n})\n"],"file":"MarkdownBookTool.test.js"}